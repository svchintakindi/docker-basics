# docker compose file to create PostgreSQL database and pgadmin containers in same network
# A Docker Compose must always start with the version tag.
# We use '3' because it's the last version.
version: '3'
# You should know that Docker Compose works with services.
# 1 service = 1 container.
# For example, a service, a server, a client, a database...
# We use the keyword 'services' to start to create services.
services:
  postgreSQL:
    # Official Postgres image from DockerHub (we use the last version)
    image: 'postgres:latest'    
    # By default, a Postgres database is running on the 5432 port.
    # If we want to access the database from our computer (outside the container),
    # we must share the port with our computer's port.
    # The syntax is [port we want on our machine]:[port we want to retrieve in the container]
    # Note: You are free to change your computer's port,
    # but take into consideration that it will change the way
    # you are connecting to your database.
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres # The PostgreSQL user (useful to connect to the database)
      POSTGRES_PASSWORD: postgres # The PostgreSQL password (useful to connect to the database)
      POSTGRES_DB: credit_card # The PostgreSQL default database (automatically created at first launch)
    # The `volumes` tag allows us to share a folder with our container.
    # Its syntax is as follows: [folder path on our machine]:[folder path to retrieve in the container] 
    volumes:
      - postgres-data:/var/lib/postgresql/data  
volumes:
  postgres-data:
    driver: local

# docker-compose -f postgres.yaml up -d   # start postgreSQL Dtaabase and pgadmin
# docker-compose -f postgres.yaml down    # release all resources   

# Running an Interactive Shell in a Docker Container
# docker exec -it container-name sh
# exit
